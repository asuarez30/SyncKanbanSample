@{
    ViewBag.Title = "Index";
}
<div class="taskBorder"> 
    <header class="columnHeads clearfix">
        <span  data-bind="foreach: lists">
        <div  data-bind="css: { 'column analysis column4' : true}">
            <p class="title" >
                <span data-bind="text: id"></span>
            </p>
        </div>
        </span>
    </header>
    <div class="row clearfix sortParent" data-bind="foreach: lists">
        <div class="column column4 clearfix" >
            <ul class="connectedSortable dbUL ui-sortable" data-bind="sortable: { data: tasks }">
                <li class="ui-state-default" data-bind="text: name"></li>
            </ul>
            </div>
    </div>
</div>
<div id="extra"></div>
<div id="message" data-bind="flash: lastAction"></div>
<div id="error" data-bind="flash: lastError"></div>

<script language="javascript" >
    $(function () {
        var Task = function (id, name) {
            this.id = id;
            this.name = ko.observable(name);
        };

        var List = function (id, tasks) {
            this.tasks = ko.observableArray(tasks);
            this.tasks.id = id;
            this.id = id;
        };

        var dashboardViewModel = function () {
            var self = this;
            this.hub = $.connection.listHub;
            this.lists = ko.observableArray([]);
            this.lastAction = ko.observable();
            this.lastError = ko.observable();
            
            var lists = this.lists;
            
            this.init = function () {
                this.hub.getAllLists();
            };

            this.hub.allLists = function (serverLists) {
                var mappedLists = $.map(serverLists, function (item) {
                    return new List(item.id, $.map(item.Tasks, function (childItem) {
                        return new Task(childItem.Id, childItem.Name);
                    }));
                });
                lists(mappedLists);
            };

            this.hub.syncTaskMove = function (sourcePosition, sourceTableId, targetTableId, targetPosition, sourceClientId) {
                if ($.connection.hub.id != sourceClientId) {
                    var sourceTable = ko.utils.arrayFilter(lists(), function (value) { return value.id == sourceTableId; })[0];
                    var destinationTable = ko.utils.arrayFilter(lists(), function (value) { return value.id == targetTableId; })[0];
                    var student = sourceTable.tasks()[parseInt(sourcePosition)];
                    sourceTable.tasks.remove(student);
                    destinationTable.tasks.splice(targetPosition, 0, student);
                    self.lastAction("Moved " + sourcePosition + " from " + sourceTableId + " (seat " + (0 + 1) + ") to " + targetTableId + " (seat " + (targetPosition + 1) + ")");
                }
            };
            
            this.updateLastAction = function (arg) {
                self.hub.movedTask(arg.sourceIndex, arg.sourceParent.id, arg.targetParent.id, arg.targetIndex);
                self.lastAction("Moved " + arg.item.name() + " from " + arg.sourceParent.id + " (seat " + (arg.sourceIndex + 1) + ") to " + arg.targetParent.id + " (seat " + (arg.targetIndex + 1) + ")");
            };
        };

        ko.bindingHandlers.flash = {
            init: function (element) {
                $(element).hide();
            },
            update: function (element, valueAccessor) {
                var value = ko.utils.unwrapObservable(valueAccessor());
                if (value) {
                    $(element).stop().hide().text(value).fadeIn(function () {
                        clearTimeout($(element).data("timeout"));
                        $(element).data("timeout", setTimeout(function () {
                            $(element).fadeOut();
                            valueAccessor()(null);
                        }, 5000));
                    });
                }
            },
            timeout: null
        };

        var vm = new dashboardViewModel(null, null);
        ko.bindingHandlers.sortable.afterMove = vm.updateLastAction;
        ko.applyBindings(vm);
        $.connection.hub.start(function () { vm.init(); });
    });
</script>